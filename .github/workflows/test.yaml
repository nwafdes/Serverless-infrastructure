name: "Test-Lambda"

on: 
  push:
    branches: [testing, main]
  pull_request:
    branches: [main]

permissions: 
  id-token: write
  contents: read
env:
    "API_URL": ${{ secrets.API_URL }}
    "TABLE_NAME": ${{ secrets.TABLE_NAME }}
    "PARTITION_KEY": ${{ secrets.PARTITION_KEY }}
    "ITEM_NAME": ${{ secrets.ITEM_NAME }}
    "ATTRIBUTE": ${{ secrets.ATTRIBUTE }}

jobs:
  testing:
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/testing'
      environment: testing
      steps:
          - name: "Checkout repo"
            uses: actions/checkout@v3
          
          - name: Set up Terraform
            uses: hashicorp/setup-terraform@v1
            with:
              terraform_version: '1.4.0'

          - name: "Configure AWS Creds"
            uses: aws-actions/configure-aws-credentials@v4.1.0
            with:
              aws-region: ${{ secrets.AWS_REGION }}
              role-to-assume: ${{ secrets.IAM_ARN }}
              role-session-name: samplerolesession
          
          - name: "Zip lambda function"
            working-directory: lambda
            run: zip lambda_function_payload.zip lambda_function.py

          - name: "Terraform init"
            working-directory: Backend
            run: terraform init
          
          - name: "Apply plan"
            working-directory: Backend
            run: terraform plan

          - name: "Apply apply"
            working-directory: Backend
            run: terraform apply --auto-approve
            
          - name: "Setup Python"
            uses: actions/setup-python@v5
            with:
              python-version: '3.9'
          
          - name: "Install requirements"
            working-directory: pytest
            run: pip install -r requirements.txt

          - name: "Run COR Test"
            working-directory: pytest
            if: github.ref == 'refs/heads/testing'
            run: pytest test_cors.py

        
          - name: "Run database Test"
            working-directory: pytest
            if: github.ref == 'refs/heads/testing'
            run: pytest test_database_value.py

          - name: "Run database Test"
            working-directory: pytest
            if: github.ref == 'refs/heads/testing'
            run: pytest test_input.py


  prod:
      runs-on: ubuntu-latest
      environment: testing # Note
      if: github.ref == 'refs/heads/main'
      steps:
      #     - name: "Checkout repo"
      #       uses: actions/checkout@v3
          
      #     - name: Set up Terraform
      #       uses: hashicorp/setup-terraform@v1
      #       with:
      #         terraform_version: '1.4.0'

      #     - name: "Configure AWS Creds"
      #       uses: aws-actions/configure-aws-credentials@v4.1.0
      #       with:
      #         aws-region: ${{ secrets.AWS_REGION }}
      #         role-to-assume: ${{ secrets.MAIN_OIDC_ROLE }}
      #         role-session-name: samplerolesession
          
      #     - name: "Zip lambda function"
      #       working-directory: lambda
      #       run: zip lambda_function_payload.zip lambda_function.py

      #     - name: "Terraform init"
      #       working-directory: Backend
      #       run: terraform init
          
      #     - name: "Apply plan"
      #       working-directory: Backend
      #       run: terraform plan

      #     - name: "Apply apply"
      #       working-directory: Backend
      #       run: terraform apply --auto-approve
        - name: Print OIDC token claims
          run: |
            echo "${{ steps.get_token.outputs.token }}" | jq -R 'split(".") | .[1] | @base64d | fromjson'
          env:
            AWS_REGION: ${{ secrets.AWS_REGION }}
          id: get_token
        - uses: actions/github-script@v6
          with:
            script: |
              const token = await core.getIDToken();
              core.setOutput("token", token);